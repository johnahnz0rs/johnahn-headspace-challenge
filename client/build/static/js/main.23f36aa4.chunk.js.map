{"version":3,"sources":["components/Home.js","components/ContentArea.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchBlog","searchTag","searchResults","favoritePosts","default","bind","assertThisInitialized","inputHandler","clickHandlerAdd","clickHandlerRemove","searchWithParams","createResultBodies","findPostIndexInArrayById","Math","floor","random","chance","_this2","rando","fetch","concat","then","res","json","data","postsArray","createBody","returnedPosts","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","i","value","type","body","photos","alt_sizes","url","text","source","post_url","source_url","source_title","blurb","excerpt","pic","original_size","title","audio_caption","caption","audio_embed","embed","video_caption","video_embed","player","embed_code","question","answer","push","id","err","return","setState","event","name","target","defineProperty","_this3","length","eventIndex","tempFavPosts","slice","tempSearchResults","splice","array","favPostsBody","_this4","searchResultsBody","map","item","react_default","a","createElement","key","className","Parser","onClick","Fragment","placeholder","onChange","React","Component","ContentArea","Route","exact","path","component","App","BrowserRouter","components_ContentArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23f36aa4.chunk.js","sourcesContent":["import React from 'react';\nimport Parser from 'html-react-parser';\n\nclass Home extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchBlog: '',\n            searchTag: '',\n            searchResults: [],\n            favoritePosts: []\n        };\n        this.default = this.default.bind(this);\n        this.inputHandler = this.inputHandler.bind(this);\n        this.clickHandlerAdd = this.clickHandlerAdd.bind(this);\n        this.clickHandlerRemove = this.clickHandlerRemove.bind(this);\n        this.searchWithParams = this.searchWithParams.bind(this);\n        this.createResultBodies = this.createResultBodies.bind(this);\n        this.findPostIndexInArrayById = this.findPostIndexInArrayById.bind(this);\n    }\n\n    componentDidMount() {\n        // load random posts on app startup\n        this.default(Math.floor(Math.random() * 3) + 1);\n    }\n\n    default(chance) {\n        // randomly show these tags on startup:\n        // puppy - for pictures; text - for anything that might pop up; audio - for audio/video file embeds;\n        let rando = '';\n        switch (chance) {\n            case 1:\n                rando = 'puppy';\n                break;\n            case 2:\n                rando = 'text';\n                break;\n            case 3:\n                rando = 'audio';\n                break;\n        }\n        fetch(`/api/tag/${rando}`)\n            .then(res => res.json())\n            .then(data => {\n                this.createResultBodies(data);\n            });\n    }\n\n    createResultBodies(postsArray) {\n        // create HTML for each post in an array, according to type;\n        let returnedPosts = [],\n            createBody;\n        for (let i of postsArray) {\n            switch (i.type) {\n                case 'text':\n                    createBody = i.body;\n                    break;\n                case 'photo':\n                    createBody = `<p><img src=${i.photos[0].alt_sizes[0].url} alt='' /></p>`;\n                    break;\n                case 'quote':\n                    createBody = `<h4>${i.text}</h4><p>${i.source}<br />type: ${i.type}<br />post_url: ${i.post_url}<br />source_url: ${i.source_url}<br />source_title: ${i.source_title}</p>`;\n                    break;\n                case 'link':\n                    let blurb = i.excerpt ? i.excerpt : '';\n                    let pic = i.photos ? i.photos[0].original_size.url : '';\n                    createBody = `<h3>${i.title}</h3><img alt=\"\" src=${pic} /> <p>${blurb}<br />(<a href=${i.url} target=\"_blank\">Link</a>)</p>`;\n                    break;\n                case 'chat':\n                    createBody = i.body;\n                    break;\n                case 'audio':\n                    let title = i.source_title ? i.source_title : '';\n                    let audio_caption = i.caption ? i.caption : '';\n                    let audio_embed = i.embed ? i.embed : '';\n                    createBody = `<p>${title}<br />${audio_caption}<br />${audio_embed}  <br />(<a href=${i.source_url} target=\"_blank\">Link</a>)</p>`;\n                    break;\n                case 'video':\n                    let video_caption = i.caption ? i.caption : '';\n                    let video_embed = i.player[0] ? i.player[0].embed_code : '';\n                    createBody = `<p>${video_caption}<br />${video_embed}</p>`;\n                    break;\n                case 'answer':\n                    createBody = `<p>Q: ${i.question}<br />A: ${i.answer}</p>`;\n                    break;\n            }\n            returnedPosts.push({type: i.type, id: i.id, body: createBody});\n        }\n        // after pushing all posts to tempArray, then setState;\n        this.setState({searchResults: returnedPosts});\n    }\n\n    inputHandler(event) {\n        // handles user inputs: blogName && tag;\n        let name = event.target.name,\n            value = event.target.value;\n        this.setState({[name]: value});\n    }\n\n    searchWithParams() {\n        // clear state.searchResults before loading new search results;\n        this.setState({searchResults: []});\n        // search by blog name\n        if (this.state.searchBlog.length && !this.state.searchTag.length) {\n            fetch(`/api/blog/${this.state.searchBlog}`)\n                .then(res => res.json())\n                .then(data => {\n                    this.createResultBodies(data);\n                });\n        // search by blog & tag\n        } else if (this.state.searchBlog.length && this.state.searchTag.length) {\n            fetch(`/api/blog/${this.state.searchBlog}/${this.state.searchTag}`)\n                .then(res => res.json())\n                .then(data => {\n                    this.createResultBodies(data);\n                });\n        // search by tag\n        } else if (!this.state.searchBlog.length && this.state.searchTag.length) {\n            fetch(`/api/tag/${this.state.searchTag}`)\n                .then(res => res.json())\n                .then(data => {\n                    this.createResultBodies(data);\n                });\n        }\n    }\n\n    clickHandlerAdd(event) {\n        // find this post in state.searchResults\n        const eventIndex = this.findPostIndexInArrayById(event.target.id, this.state.searchResults);\n        // add post to state.favPosts\n        let tempFavPosts = this.state.favoritePosts.slice();\n        tempFavPosts.push(this.state.searchResults[eventIndex]);\n        this.setState({favoritePosts: tempFavPosts});\n        // remove post from state.searchResults\n        let tempSearchResults = this.state.searchResults.slice();\n        tempSearchResults.splice(eventIndex, 1);\n        this.setState({searchResults: tempSearchResults});\n    }\n\n    clickHandlerRemove(event) {\n        // find post in state.favPosts\n        const eventIndex = this.findPostIndexInArrayById(event.target.id, this.state.favoritePosts);\n        // remove post from state.favPosts\n        let tempFavPosts = this.state.favoritePosts.slice();\n        tempFavPosts.splice(eventIndex, 1);\n        this.setState({favoritePosts: tempFavPosts});\n    }\n\n    findPostIndexInArrayById(id, array) {\n        for (let i in array) {\n            if (array[i].id == id) {\n                return i;\n            }\n        }\n    }\n\n    render() {\n        let searchResultsBody = this.state.searchResults.map(item => {\n            return (\n                <div key={item.id} className=\"each-search-result row\">\n                    <div className=\"each-search-result-content col-sm-8\">\n                        {Parser(item.body)}\n                    </div>\n                    <div className=\"each-search-result-button-area col-sm-3\">\n                        <button id={item.id} className=\"btn btn-add btn-lg btn-success\" onClick={this.clickHandlerAdd}>Add</button>\n                        <p>{item.type}</p>\n                    </div>\n                </div>\n            );\n        });\n\n        let favPostsBody;\n        if (this.state.favoritePosts[0]) {\n\n            favPostsBody = this.state.favoritePosts.map(item => {\n                return (\n                    <div key={item.id} className=\"each-fav-post row\">\n                        <div className=\"each-fav-post-content col-sm-8\">\n                            {Parser(item.body)}\n                        </div>\n                        <div className=\"each-fav-post-button-area col-sm-3\">\n                            <button id={item.id} className=\"btn btn-lg btn-danger\" onClick={this.clickHandlerRemove}>Remove</button>\n                            <p>{item.type}</p>\n                        </div>\n                    </div>\n                );\n            });\n        }\n\n        return (\n            <React.Fragment>\n                <div className=\"my-container\">\n                    {/*left-col: search & results*/}\n                    <div className=\"col col-sm-6 col-search-comp\">\n                        {/*Search Bars*/}\n                        <div className=\"row section-search\">\n                            <div className=\"col-sm-6 search-by\">\n                                <h3>Blog Name:</h3>\n                                <input className=\"search-input search-blog\" type=\"text\" name=\"searchBlog\" placeholder=\"ex: peacecorps\" value={this.state.searchBlog} onChange={this.inputHandler}/>\n                            </div>\n                            <div className=\"col-sm-6 search-by\">\n                                <h3>Tag:</h3>\n                                <input className=\"search-input search-tag\" type=\"text\" name=\"searchTag\" placeholder=\"ex: gif\" value={this.state.searchTag} onChange={this.inputHandler} />\n                                <button className=\"btn btn-lg btn-primary btn-search\" onClick={this.searchWithParams}>Search</button>\n                            </div>\n                        </div>\n                        {/*Search Results*/}\n                        <div className=\"row section-search-results\">\n                            {searchResultsBody}\n                        </div>\n                    </div>\n\n                    {/*right-col: fav posts*/}\n                    <div className=\"col col-sm-6 col-favorites-comp\">\n                        <div className=\"row section-fav-posts\">\n                            <div className=\"favorites-header\">\n                                <h2>Favorites:</h2>\n                            </div>\n                            {/*Fav Posts*/}\n                            <div>\n                                {favPostsBody}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport { Route } from 'react-router-dom';\n// import User from './User';\n// import AgiliqTest from './AgiliqTest';\nimport Home from './Home';\n\n\nconst ContentArea = props => {\n\n    return (\n        <React.Fragment>\n            <div className=\"root-div\">\n\n                {/*<Route exact path=\"/\" component={Login} />*/}\n                {/*<Route path=\"/user\" component={User} />*/}\n                {/*<Route path=\"/profile/:id\" component={Profile} />*/}\n\n                {/*<Route exact path = \"/\" component={AgiliqTest} />*/}\n                <Route exact path = \"/\" component={Home} />\n\n            </div>\n        </React.Fragment>\n    );\n\n};\n\nexport default ContentArea;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport ContentArea from './components/ContentArea';\n\nclass App extends Component {\n\n  componentDidMount() { }\n\n  render() {\n    return (\n      <BrowserRouter>\n          <React.Fragment>\n              <ContentArea />\n          </React.Fragment>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}